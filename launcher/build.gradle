apply plugin: "java-library"
apply plugin: "com.github.johnrengelman.shadow"


import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardCopyOption

archivesBaseName = "ignite-launcher"

dependencies {
  // API
  implementation(project(":api"))

  // Event
  implementation("net.kyori:event-method-asm:4.0.0-SNAPSHOT") {
    exclude group: "org.ow2.asm"
  }

  // Access Transformers
  implementation("net.minecraftforge:accesstransformers:2.2.1:service") {
    exclude group: "org.apache.logging.log4j"
  }

  // Core
  compile("cpw.mods:modlauncher:8.0.9") {
    exclude group: "org.apache.logging.log4j"
  }

  compile("cpw.mods:grossjava9hacks:1.3.0") {
    exclude group: "org.apache.logging.log4j"
  }
}

jar {
  manifest {
    attributes "Main-Class": "com.mineteria.ignite.applaunch.IgniteBootstrap"
    attributes "Premain-Class": "com.mineteria.ignite.applaunch.agent.Agent"

    attributes([
      "Specification-Title": "Ignite",
      "Specification-Vendor": "Mineteria",
      "Specification-Version": 1.0,
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Vendor": "Mineteria"
    ], "com/mineteria/ignite/applaunch/")

    from { zipTree { configurations.compile.files.find { entry -> entry.name.contains("modlauncher") } }.matching { include "**/MANIFEST.MF" }.singleFile }
  }
}

shadowJar {
  mergeServiceFiles()
  transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)

  dependencies {
    // API
    include(project(":api"))

    // Logging
    include dependency("org.apache.logging.log4j:log4j-api")
    include dependency("org.apache.logging.log4j:log4j-core")
    include dependency("org.checkerframework:checker-qual")
    include dependency("net.minecrell:terminalconsoleappender")
    include dependency("org.jline:jline-reader")
    include dependency("org.jline:jline-terminal")
    include dependency("org.jline:jline-terminal-jna")
    include dependency("net.java.dev.jna:jna")

    // Configuration
    include dependency("org.spongepowered:configurate-core")
    include dependency("org.spongepowered:configurate-hocon")
    include dependency("org.spongepowered:configurate-yaml")
    include dependency("org.spongepowered:configurate-gson")
    include dependency("com.typesafe:config")
    include dependency("com.google.code.gson:gson")
    include dependency("org.yaml:snakeyaml")

    // Event
    include dependency("net.kyori:event-api")
    include dependency("net.kyori:event-method")
    include dependency("net.kyori:event-method-asm")

    // Common
    include dependency("com.google.guava:guava")
    include dependency("com.google.guava:failureaccess")
    include dependency("com.google.inject:guice")
    include dependency("com.google.code.gson:gson")
    include dependency("javax.inject:javax.inject")
    include dependency("aopalliance:aopalliance")

    // ASM
    include dependency("org.ow2.asm:asm")
    include dependency("org.ow2.asm:asm-analysis")
    include dependency("org.ow2.asm:asm-commons")
    include dependency("org.ow2.asm:asm-tree")
    include dependency("org.ow2.asm:asm-util")

    // Mixin
    include dependency("org.spongepowered:mixin")

    // Access Transformers
    include dependency("net.minecraftforge:accesstransformers")
    include dependency("org.antlr:antlr4-runtime")

    // Core
    include dependency("cpw.mods:modlauncher")
    include dependency("cpw.mods:grossjava9hacks")
    include dependency("net.sf.jopt-simple:jopt-simple")
  }
}

task copyFinalJarToTarget(type: DefaultTask) {
  doLast {
    Path targetJarDirectory = projectDir.toPath().toAbsolutePath().resolve("../target")
    Files.createDirectories(targetJarDirectory)
    Files.copy(
      shadowJar.archivePath.toPath().toAbsolutePath(),
      targetJarDirectory.resolve(shadowJar.baseName + '.jar'),
      StandardCopyOption.REPLACE_EXISTING
    )
  }
}

artifacts {
  archives shadowJar
}

build.dependsOn(copyFinalJarToTarget)
